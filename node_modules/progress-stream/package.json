{
  "_args": [
    [
      {
        "raw": "progress-stream@^1.1.0",
        "scope": null,
        "escapedName": "progress-stream",
        "name": "progress-stream",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/Users/echolevel/Sites/amigapal/node_modules/nugget"
    ]
  ],
  "_from": "progress-stream@>=1.1.0 <2.0.0",
  "_id": "progress-stream@1.2.0",
  "_inCache": true,
  "_location": "/progress-stream",
  "_nodeVersion": "4.1.0",
  "_npmUser": {
    "name": "freeall",
    "email": "freeall@gmail.com"
  },
  "_npmVersion": "2.14.3",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "isarray": "0.0.1",
    "string_decoder": "0.10.31"
  },
  "_requested": {
    "raw": "progress-stream@^1.1.0",
    "scope": null,
    "escapedName": "progress-stream",
    "name": "progress-stream",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/nugget"
  ],
  "_resolved": "https://registry.npmjs.org/progress-stream/-/progress-stream-1.2.0.tgz",
  "_shasum": "2cd3cfea33ba3a89c9c121ec3347abe9ab125f77",
  "_shrinkwrap": null,
  "_spec": "progress-stream@^1.1.0",
  "_where": "/Users/echolevel/Sites/amigapal/node_modules/nugget",
  "author": {
    "name": "freeall",
    "email": "freeall@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/freeall/progress-stream/issues"
  },
  "dependencies": {
    "speedometer": "~0.1.2",
    "through2": "~0.2.3"
  },
  "description": "Read the progress of a stream",
  "devDependencies": {
    "numeral": "~1.5.2",
    "request": "~2.29.0",
    "single-line-log": "~1.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "2cd3cfea33ba3a89c9c121ec3347abe9ab125f77",
    "tarball": "https://registry.npmjs.org/progress-stream/-/progress-stream-1.2.0.tgz"
  },
  "gitHead": "90a9fab0f71445fbb924ef0b93930863600bf5d9",
  "homepage": "https://github.com/freeall/progress-stream#readme",
  "keywords": [
    "stream",
    "progress",
    "percentage",
    "percent",
    "download",
    "upload",
    "file",
    "streaming",
    "request",
    "http"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "maintainers": [
    {
      "name": "freeall",
      "email": "freeall@gmail.com"
    }
  ],
  "name": "progress-stream",
  "optionalDependencies": {},
  "readme": "# progress-stream\n\nRead the progress of a stream. Supports speed and eta.\n\nGets the lengths of the stream automatically if you're using the request or http module. You can also pass the length on initiation. Progress-stream will also check to see if the stream already have a length property.\n\n\tnpm install progress-stream\n\n## Usage\n\nThis example copies a large file, and prints out the percentage, speed and remaining every 100ms.\n\n```js\nvar progress = require('progress-stream');\nvar fs = require('fs');\n\nvar stat = fs.statSync(filename);\nvar str = progress({\n\tlength: stat.size,\n\ttime: 100\n});\n\nstr.on('progress', function(progress) {\n\tconsole.log(progress);\n\n\t/*\n\t{\n\t\tpercentage: 9.05,\n\t\ttransferred: 949624,\n\t\tlength: 10485760,\n\t\tremaining: 9536136,\n\t\teta: 42,\n\t\truntime: 3,\n\t\tdelta: 295396,\n\t\tspeed: 949624\n\t}\n\t*/\n});\n\nfs.createReadStream(filename)\n\t.pipe(str)\n\t.pipe(fs.createWriteStream(output));\n```\n\n## Methods\n\n### progress([options], [onprogress])\n\nYou can instantiate in two ways:\n\n``` js\nvar str = progress({time:100});\nstr.on('progress', function(progress) { ... });\n```\n\nor inline the progress listener\n\n``` js\nvar str = progress({time:100}, function(progress) { ... });\n```\n\n## Properties\n\n### .progress\n\nYou can get the progress from the progress property.\n\n``` js\nvar str = progress({time:100});\n\nconsole.log(str.progress);\n\n/*\n{\n\tpercentage: 9.05,\n\ttransferred: 949624,\n\tlength: 10485760,\n\tremaining: 9536136,\n\teta: 10,\n\truntime: 0,\n\tdelta: 295396,\n\tspeed: 949624\n}\n*/\n```\n\n## Events\n\n### on('progress', function(progress) { ... })\n\n``` js\nvar str = progress({time:100});\nstr.on('progress', function(progress) { ... });\n```\n\n## Options\n\n### time(integer)\n\nSets how often progress events is emitted. If omitted then defaults to emit every time a chunk is received.\n\n### speed(integer)\n\nSets how long the speedometer needs to calculate the speed. Defaults to 5 sec.\n\n### length(integer)\n\nIf you already know the length of the stream, then you can set it. Defaults to 0.\n\n### drain(boolean)\n\nIn case you don't want to include a readstream after progress-stream, set to true to drain automatically. Defaults to false.\n\n### transferred(integer)\n\nIf you want to set how much data have previous been downloaded. Useful for a resumed download.\n\n## Examples\n\n### Using the request module\n\nThis example uses request to download a 100 MB file, and writes out the percentage every second.\n\nYou can also find an example in `test/request.js`.\n\n``` js\nvar progress = require('progress-stream');\nvar req = require('request');\nvar fs = require('fs');\n\nvar str = progress({\n\ttime: 1000\n});\n\nstr.on('progress', function(progress) {\n\tconsole.log(Math.round(progress.percentage)+'%');\n});\n\nreq('http://cachefly.cachefly.net/100mb.test', { headers: { 'user-agent': 'test' }})\n\t.pipe(str)\n\t.pipe(fs.createWriteStream('test.data'));\n```\n\n### Using the http module\n\nIn `test/http.js` it's shown how to do it with the http module.\n\n\n## Methods\n\n\n### `setLength(newLength)`\n\nSometimes, you don't know how big a stream is right away (e.g. multipart file uploads).  You might find out after a few chunks have already passed through the stream, seconds or even minutes later.  In this case, you can use the `setLength` method to recalculate the relevant tracked progress data.\n\n```js\nvar str = progress({});\nsomeFickleStreamInstance.pipe(str).pipe(fs.createWriteStream('test.data'));\n\nsomeFickleStreamInstance.on('conviction', function nowIKnowMyLength (actualLength) {\n  str.setLength(actualLength);\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/freeall/progress-stream.git"
  },
  "scripts": {
    "test": "node test/http.js && node test/request.js"
  },
  "version": "1.2.0"
}
