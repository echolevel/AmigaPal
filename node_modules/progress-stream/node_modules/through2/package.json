{
  "_args": [
    [
      {
        "raw": "through2@~0.2.3",
        "scope": null,
        "escapedName": "through2",
        "name": "through2",
        "rawSpec": "~0.2.3",
        "spec": ">=0.2.3 <0.3.0",
        "type": "range"
      },
      "/Users/echolevel/Sites/amigapal/node_modules/progress-stream"
    ]
  ],
  "_from": "through2@>=0.2.3 <0.3.0",
  "_id": "through2@0.2.3",
  "_inCache": true,
  "_location": "/progress-stream/through2",
  "_npmUser": {
    "name": "bryce",
    "email": "bryce@ravenwall.com"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "through2@~0.2.3",
    "scope": null,
    "escapedName": "through2",
    "name": "through2",
    "rawSpec": "~0.2.3",
    "spec": ">=0.2.3 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/progress-stream"
  ],
  "_resolved": "https://registry.npmjs.org/through2/-/through2-0.2.3.tgz",
  "_shasum": "eb3284da4ea311b6cc8ace3653748a52abf25a3f",
  "_shrinkwrap": null,
  "_spec": "through2@~0.2.3",
  "_where": "/Users/echolevel/Sites/amigapal/node_modules/progress-stream",
  "author": {
    "name": "Rod Vagg",
    "email": "r@va.gg",
    "url": "https://github.com/rvagg"
  },
  "bugs": {
    "url": "https://github.com/rvagg/through2/issues"
  },
  "dependencies": {
    "readable-stream": "~1.1.9",
    "xtend": "~2.1.1"
  },
  "description": "A tiny wrapper around Node streams2 Transform to avoid explicit subclassing noise",
  "devDependencies": {
    "bl": "~0.4.1",
    "stream-spigot": "~2.1.2",
    "tape": "~1.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "eb3284da4ea311b6cc8ace3653748a52abf25a3f",
    "tarball": "https://registry.npmjs.org/through2/-/through2-0.2.3.tgz"
  },
  "homepage": "https://github.com/rvagg/through2#readme",
  "keywords": [
    "stream",
    "streams2",
    "through",
    "transform"
  ],
  "license": "MIT",
  "main": "through2.js",
  "maintainers": [
    {
      "name": "rvagg",
      "email": "rod@vagg.org"
    },
    {
      "name": "bryce",
      "email": "bryce@ravenwall.com"
    }
  ],
  "name": "through2",
  "optionalDependencies": {},
  "readme": "# through2\n\n[![Build Status](https://secure.travis-ci.org/rvagg/through2.png)](http://travis-ci.org/rvagg/through2)\n\n[![NPM](https://nodei.co/npm/through2.png?compact=true)](https://nodei.co/npm/through2/) \n\n[![david-dm](https://david-dm.org/rvagg/through2.png)](https://david-dm.org/rvagg/through2/)\n[![david-dm](https://david-dm.org/rvagg/through2/dev-status.png)](https://david-dm.org/rvagg/through2#info=devDependencies/)\n\n**A tiny wrapper around Node streams.Transform (Streams2) to avoid explicit subclassing noise**\n\nInspired by [Dominic Tarr](https://github.com/dominictarr)'s [through](https://github.com/dominictarr/through) in that it's so much easier to make a stream out of a function than it is to set up the prototype chain properly: `through(function (chunk) { ... })`.\n\n```js\nfs.createReadStream('ex.txt')\n    .pipe(through2(function (chunk, enc, callback) {\n    for (var i = 0; i < chunk.length; i++)\n      if (chunk[i] == 97)\n        chunk[i] = 122 // swap 'a' for 'z'\n    this.push(chunk)\n    callback()\n  }))\n  .pipe(fs.createWriteStream('out.txt'))\n```\n\nOr object streams:\n\n```js\nvar all = []\nfs.createReadStream('data.csv')\n  .pipe(csv2())\n  .pipe(through2({ objectMode: true }, function (chunk, enc, callback) {\n  \tvar data = {\n        name    : chunk[0]\n      , address : chunk[3]\n      , phone   : chunk[10]\n    }\n    this.push(data)\n    callback()\n  }))\n  .on('data', function (data) {\n    all.push(data)\n  })\n  .on('end', function () {\n    doSomethingSpecial(all)\n  })\n```\n\n## API\n\n<b><code>through2([ options, ] [ transformFunction ] [, flushFunction ])</code></b>\n\nConsult the **[stream.Transform](http://nodejs.org/docs/latest/api/stream.html#stream_class_stream_transform)** documentation for the exact rules of the `transformFunction` (i.e. `this._transform`) and the optional `flushFunction` (i.e. `this._flush`).\n\n### options\n\nThe options argument is optional and is passed straight through to `stream.Transform`. So you can use `objectMode:true` if you are processing non-binary streams.\n\nThe `options` argument is first, unlike standard convention, because if I'm passing in an anonymous function then I'd prefer for the options argument to not get lost at the end of the call:\n\n```js\nfs.createReadStream('/tmp/important.dat')\n\t.pipe(through2({ objectMode: true, allowHalfOpen: false }, function (chunk, enc, cb) {\n\t\tthis.push(new Buffer('wut?'))\n  \tcb()\n\t})\n  .pipe(fs.createWriteStream('/tmp/wut.txt'))\n```\n\n### transformFunction\n\nThe `transformFunction` must have the following signature: `function (chunk, encoding, callback) {}`. A minimal implementation should call the `callback` function to indicate that the transformation is done, even if that transformation means discarding the chunk.\n\nTo queue a new chunk, call `this.push(chunk)`&mdash;this can be called as many times as required before the `callback()` if you have multiple pieces to send on.\n\nIf you **do not provide a `transformFunction`** then you will get a simple simple pass-through stream.\n\n### flushFunction\n\nThe optional `flushFunction` is provided as the last argument (2nd or 3rd, depending on whether you've supplied options) is called just prior to the stream ending. Can be used to finish up any processing that may be in progress.\n\n<b><code>through2.ctor([ options, ] transformFunction[, flushFunction ])</code></b>\n\nInstead of returning a `stream.Transform` instance, `through2.ctor()` returns a **constructor** for a custom Transform. This is useful when you want to use the same transform logic in multiple instances.\n\n```js\nvar FToC = through2.ctor({objectMode: true}, function (record, encoding, callback) {\n  if (record.temp != null && record.unit = \"F\") {\n    record.temp = ( ( record.temp - 32 ) * 5 ) / 9\n    record.unit = \"C\"\n  }\n  this.push(record)\n  callback()\n})\n\n// Create instances of FToC like so:\nvar converter = new FToC()\n// Or:\nvar converter = FToC()\n// Or specify/override options when you instantiate, if you prefer:\nvar converter = FToC({objectMode: true})\n\n```\n\n## License\n\n**through2** is Copyright (c) 2013 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licenced under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rvagg/through2.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "0.2.3"
}
